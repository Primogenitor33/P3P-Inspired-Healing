import( "P3PHeal.msg" );

void P3PHealVersion()
{
	MSG_HELP(P3PHealWelcome);
	OPEN_MSG_WIN();
	MSG( P3PChooseVersion );
	int selection = SEL(P3PHealVersionSel);
	switch (selection) {
		case 0: //Full Game
			BIT_ON( 9994 );
		case 1: //Late Game
			BIT_ON( 9993 );
		default:
			break;
	}
	CLOSE_MSG_WIN();
	return;
}

void ShowP3PHealTutorial()
{
	BIT_ON( 9995 );
	MSG_HELP(P3PHealTutorial);
	return;
}

void P3PMemberReturn()
{
	OPEN_MSG_WIN();
	MSG( P3PHealDead );
	int selection = SEL(P3PHealDeadSel);
	switch (selection) {
		case 0: //Yes
			CLOSE_MSG_WIN();
			Healing();
			break;
		case 1: //No
			CLOSE_MSG_WIN();
			member_return_unhooked();
			break;
		default:
			break;
	}
	CLOSE_MSG_WIN();
	return;
}

void P3PClock()
{
	OPEN_MSG_WIN();
	MSG( P3PHealClock );
	int selection = SEL(P3PHealClockSel);
	switch (selection) {
		case 0: //Heal
			CLOSE_MSG_WIN();
			HealingMenu();
			break;
		case 1: //Save
			CLOSE_MSG_WIN();
			save_point_unhooked();
			break;
		default:
			break;
	}
	CLOSE_MSG_WIN();
	return;
}

void HealingMenu()
{
	OPEN_MSG_WIN();
	MSG( HealingMenu );
	int selection = SEL(HealingMenuSel);
	switch (selection) {
		case 0: //Yes
			CLOSE_MSG_WIN();
			Healing();
			break;
		default: //No
			break;
	}
	CLOSE_MSG_WIN();
	return
}

void Healing()
{
	FUNCTION_0093();
	return;
}

void P3PHealMain()
{
	if ( BIT_CHK( 9995 ) != 1 )
	{
		ShowP3PHealTutorial();
	}
	
	int var1;
    int var2;
    
    if ( FUNCTION_00D7() == 0 )
    {
        
        if ( BIT_CHK( 3581 ) == 1 )
        {
            end_tutorial_dungeon();
            return;
        }

        
        if ( ( BIT_CHK( 5043 ) == 1 ) && ( GET_CNT( 8 ) >= 254 ) )
        {
            BIT_ON( 3192 );
        }

        BIT_OFF( 5140 );
        gVar37 = GET_FLOOR_ID();
        order_initialize();
        
        if ( ( BIT_CHK( 3106 ) != 1 ) && ( BIT_CHK( 3108 ) == 1 ) )
        {
            condition_check();
        }

        BIT_OFF( 3108 );
        FUNCTION_0151( 2 );
        FUNCTION_0151( 3 );
        FUNCTION_0151( 4 );
        FUNCTION_0151( 5 );
        FUNCTION_0151( 7 );
        FUNCTION_0151( 8 );
        FUNCTION_0151( 9 );
        FUNCTION_0151( 10 );
        
        if ( ( BIT_CHK( 4964 ) == 0 ) || ( BIT_CHK( 3175 ) == 1 ) )
        {
            BIT_ON( 3176 );
        }
        else 
        {
            BIT_OFF( 3176 );
        }

    }
    else if ( FUNCTION_00D7() == 2 )
    {
        
        if ( ( ( GET_MONTH() == 4 ) && ( GET_DAY_OF_MONTH() == 20 ) ) && ( BIT_CHK( 3569 ) == 0 ) )
        {
            BIT_ON( 3569 );
            BIT_OFF( 369 );
            MSG_HELP( TUTORIAL_SAVEPOINT );
        }
        else if ( ( ( GET_MONTH() == 3 ) && ( GET_DAY_OF_MONTH() == 10 ) ) && ( BIT_CHK( 4065 ) == 0 ) )
        {
            debug_mode_member_set();
            return;
        }
        else if ( BIT_CHK( 3120 ) == 1 )
        {
            BIT_OFF( 3120 );
            OPEN_MSG_WIN();
            
            if ( BIT_CHK( 3170 ) == 1 )
            {
                BIT_OFF( 3170 );
                MSG( MITSURU_HELP_WARNING );
                MSG( MITSURU_WARNING_JOINT );
            }

            MSG( MITSURU_ENTRANCE_HELP );
            CLOSE_MSG_WIN();
            MSG_HELP( ENTRANCE_HELP );
        }
        else if ( ( BIT_CHK( 3112 ) == 1 ) && ( CHECK_TIME_SPAN( 5, 23, 6, 7 ) == 1 ) )
        {
            BIT_OFF( 3112 );
            OPEN_MSG_WIN();
            MSG( SANADA_GREET );
            CLOSE_MSG_WIN();
        }
        else if ( BIT_CHK( 3110 ) == 1 )
        {
            BIT_OFF( 3110 );
            OPEN_MSG_WIN();
            MSG( MITSURU_GREET );
            CLOSE_MSG_WIN();
            MSG_HELP( ENTRANCE_HELP2 );
            OPEN_MSG_WIN();
            MSG( HUKA_GREET );
            CLOSE_MSG_WIN();
        }

        
        if ( BIT_CHK( 3568 ) == 1 )
        {
            member_return();
        }
		
		//Full Heal Party
		//FUNCTION_0093();
    }
    else if ( FUNCTION_00D7() == 3 )
    {
        var1 = FLD_MODEL_FUNCTION_0165( -1, 5 );
        var2 = FUNCTION_013A( var1, 0 );
        FLD_FUNCTION_0138( var2, 1 );
        FUNCTION_0079( var2, 1 );
        
        if ( ( ( ( ( ( ( ( ( ( ( ( ( BIT_CHK( 3501 ) == 1 ) || ( BIT_CHK( 3504 ) == 1 ) ) || ( BIT_CHK( 3505 ) == 1 ) ) || ( BIT_CHK( 3506 ) == 1 ) ) || ( BIT_CHK( 3507 ) == 1 ) ) || ( BIT_CHK( 3508 ) == 1 ) ) || ( BIT_CHK( 3509 ) == 1 ) ) || ( BIT_CHK( 3510 ) == 1 ) ) || ( BIT_CHK( 3511 ) == 1 ) ) || ( BIT_CHK( 3512 ) == 1 ) ) || ( BIT_CHK( 3513 ) == 1 ) ) || ( BIT_CHK( 3514 ) == 1 ) ) || ( BIT_CHK( 3515 ) == 1 ) )
        {
            FLD_FUNCTION_0089( var2, 1, 1, 0, 1 );
        }
        else if ( ( ( ( ( ( ( ( ( ( ( ( ( ( BIT_CHK( 3516 ) == 1 ) || ( BIT_CHK( 3517 ) == 1 ) ) || ( BIT_CHK( 3518 ) == 1 ) ) || ( BIT_CHK( 3519 ) == 1 ) ) || ( BIT_CHK( 3528 ) == 1 ) ) || ( BIT_CHK( 3529 ) == 1 ) ) || ( BIT_CHK( 3530 ) == 1 ) ) || ( BIT_CHK( 3531 ) == 1 ) ) || ( BIT_CHK( 3532 ) == 1 ) ) || ( BIT_CHK( 3533 ) == 1 ) ) || ( BIT_CHK( 3534 ) == 1 ) ) || ( BIT_CHK( 3535 ) == 1 ) ) || ( BIT_CHK( 3500 ) == 1 ) ) || ( BIT_CHK( 3499 ) == 1 ) )
        {
            FLD_FUNCTION_0089( var2, 1, 1, 0, 1 );
        }

        var1 = FLD_MODEL_FUNCTION_0165( -1, 3 );
        var2 = FUNCTION_013A( var1, 0 );
        FLD_FUNCTION_0138( var2, 5 );
        FUNCTION_0079( var2, 1 );
        
        if ( BIT_CHK( 3192 ) == 1 )
        {
            FUNCTION_0079( 10247, 1 );
        }
        else 
        {
            FUNCTION_0079( 10247, 0 );
        }

        
        if ( BIT_CHK( 79 ) == 1 )
        {
            FUNCTION_0079( 10245, 0 );
            BIT_OFF( 3583 );
        }
        else 
        {
            FUNCTION_0079( 10245, 1 );
            BIT_ON( 3583 );
        }

    }
}